{"ast":null,"code":"import _toConsumableArray from\"/home/pop_os_flex/Documents/Code/JavaScript/ReactJS/fakeblock-shopping/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"/home/pop_os_flex/Documents/Code/JavaScript/ReactJS/fakeblock-shopping/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";export var initialState={basket:[],user:null};export var getBasketTotal=function getBasketTotal(basket){return basket===null||basket===void 0?void 0:basket.reduce(function(amount,item){return item.price+amount;},0);};var reducer=function reducer(state,action){switch(action.type){case\"ADD_TO_BASKET\"://creates new array and adds item, then sets array as new basket\nvar tmp=_objectSpread(_objectSpread({},state),{},{basket:[].concat(_toConsumableArray(state.basket),[action.item])});return tmp;case\"REMOVE_FROM_BASKET\"://finds the first index of match\nvar index=state.basket.findIndex(function(basketItem){return basketItem.id===action.id;});var newBasket=_toConsumableArray(state.basket);if(index>=0){newBasket.splice(index,1);}else{break;}return _objectSpread(_objectSpread({},state),{},{basket:newBasket});case\"SET_USER\":return _objectSpread(_objectSpread({},state),{},{user:action.user});default:return state;}};export default reducer;/*\nfor (let i=0; i < state.basket?.length;i++) {\n        if (action.item.id === state.basket[i].item.id) {\n          console.log('duplicates');\n        }\n      }\n\n\n      for (let i=0; i < arr.basket.length;i++) {\n            if (action.item.id ===  arr.basket[i].item.id) {\n              console.log('duplicates');\n            }\n          }\n                      console.log(arr.basket[arr.basket.length-1].id);\n\n\n\nlet add = true;\n      let tmp= {\n        ...state,\n        basket: [...state.basket]\n      };\n\n      if(state.basket?.length > 0){\n        for (let i=0; i < state.basket?.length;i++) {\n          if (action.item.id === state.basket[i].id) {\n            console.log(state.basket[i].quantity);\n            state.basket[i].quantity++;\n            return tmp;\n          }\n        }\n      }\n*/","map":{"version":3,"sources":["/home/pop_os_flex/Documents/Code/JavaScript/ReactJS/fakeblock-shopping/src/Components/reducer.js"],"names":["initialState","basket","user","getBasketTotal","reduce","amount","item","price","reducer","state","action","type","tmp","index","findIndex","basketItem","id","newBasket","splice"],"mappings":"iYAAA,MAAO,IAAMA,CAAAA,YAAY,CAAG,CAC1BC,MAAM,CAAE,EADkB,CAE1BC,IAAI,CAAC,IAFqB,CAArB,CAIP,MAAO,IAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACF,MAAD,QAC5BA,CAAAA,MAD4B,SAC5BA,MAD4B,iBAC5BA,MAAM,CAAEG,MAAR,CAAe,SAACC,MAAD,CAASC,IAAT,QAAkBA,CAAAA,IAAI,CAACC,KAAL,CAAaF,MAA/B,EAAf,CAAsD,CAAtD,CAD4B,EAAvB,CAGP,GAAMG,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAACC,KAAD,CAAQC,MAAR,CAAmB,CACjC,OAAQA,MAAM,CAACC,IAAf,EACE,IAAK,eAAL,CACE;AACA,GAAMC,CAAAA,GAAG,gCACJH,KADI,MAEPR,MAAM,8BAAMQ,KAAK,CAACR,MAAZ,GAAoBS,MAAM,CAACJ,IAA3B,EAFC,EAAT,CAIA,MAAOM,CAAAA,GAAP,CAEF,IAAK,oBAAL,CACE;AACA,GAAMC,CAAAA,KAAK,CAAGJ,KAAK,CAACR,MAAN,CAAaa,SAAb,CACZ,SAACC,UAAD,QAAgBA,CAAAA,UAAU,CAACC,EAAX,GAAkBN,MAAM,CAACM,EAAzC,EADY,CAAd,CAGA,GAAIC,CAAAA,SAAS,oBAAOR,KAAK,CAACR,MAAb,CAAb,CACA,GAAIY,KAAK,EAAI,CAAb,CAAgB,CACdI,SAAS,CAACC,MAAV,CAAiBL,KAAjB,CAAwB,CAAxB,EACD,CAFD,IAEO,CACL,MACD,CACD,sCACKJ,KADL,MAEER,MAAM,CAAEgB,SAFV,GAIA,IAAK,UAAL,CACE,sCACKR,KADL,MAEEP,IAAI,CAAEQ,MAAM,CAACR,IAFf,GAKJ,QACE,MAAOO,CAAAA,KAAP,CA/BJ,CAiCD,CAlCD,CAoCA,cAAeD,CAAAA,OAAf,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["export const initialState = {\n  basket: [],\n  user:null\n};\nexport const getBasketTotal = (basket) =>\n  basket?.reduce((amount, item) => item.price + amount, 0);\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"ADD_TO_BASKET\":\n      //creates new array and adds item, then sets array as new basket\n      const tmp = {\n        ...state,\n        basket: [...state.basket, action.item],\n      };\n      return tmp;\n\n    case \"REMOVE_FROM_BASKET\":\n      //finds the first index of match\n      const index = state.basket.findIndex(\n        (basketItem) => basketItem.id === action.id\n      );\n      let newBasket = [...state.basket];\n      if (index >= 0) {\n        newBasket.splice(index, 1);\n      } else {\n        break;\n      }\n      return {\n        ...state,\n        basket: newBasket,\n      };\n      case \"SET_USER\":\n        return{\n          ...state,\n          user: action.user\n        }\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n\n/*\nfor (let i=0; i < state.basket?.length;i++) {\n        if (action.item.id === state.basket[i].item.id) {\n          console.log('duplicates');\n        }\n      }\n\n\n      for (let i=0; i < arr.basket.length;i++) {\n            if (action.item.id ===  arr.basket[i].item.id) {\n              console.log('duplicates');\n            }\n          }\n                      console.log(arr.basket[arr.basket.length-1].id);\n\n\n\nlet add = true;\n      let tmp= {\n        ...state,\n        basket: [...state.basket]\n      };\n\n      if(state.basket?.length > 0){\n        for (let i=0; i < state.basket?.length;i++) {\n          if (action.item.id === state.basket[i].id) {\n            console.log(state.basket[i].quantity);\n            state.basket[i].quantity++;\n            return tmp;\n          }\n        }\n      }\n*/\n"]},"metadata":{},"sourceType":"module"}